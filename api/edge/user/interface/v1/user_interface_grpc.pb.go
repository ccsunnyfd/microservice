// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserEdgeInterfaceClient is the client API for UserEdgeInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserEdgeInterfaceClient interface {
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterReply, error)
	GenVerifyCode(ctx context.Context, in *GenVerifyCodeReq, opts ...grpc.CallOption) (*GenVerifyCodeReply, error)
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginReply, error)
	Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutReply, error)
	Auth(ctx context.Context, in *AuthReq, opts ...grpc.CallOption) (*AuthReply, error)
}

type userEdgeInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserEdgeInterfaceClient(cc grpc.ClientConnInterface) UserEdgeInterfaceClient {
	return &userEdgeInterfaceClient{cc}
}

func (c *userEdgeInterfaceClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, "/edge.user.interface.v1.UserEdgeInterface/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userEdgeInterfaceClient) GenVerifyCode(ctx context.Context, in *GenVerifyCodeReq, opts ...grpc.CallOption) (*GenVerifyCodeReply, error) {
	out := new(GenVerifyCodeReply)
	err := c.cc.Invoke(ctx, "/edge.user.interface.v1.UserEdgeInterface/GenVerifyCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userEdgeInterfaceClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, "/edge.user.interface.v1.UserEdgeInterface/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userEdgeInterfaceClient) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutReply, error) {
	out := new(LogoutReply)
	err := c.cc.Invoke(ctx, "/edge.user.interface.v1.UserEdgeInterface/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userEdgeInterfaceClient) Auth(ctx context.Context, in *AuthReq, opts ...grpc.CallOption) (*AuthReply, error) {
	out := new(AuthReply)
	err := c.cc.Invoke(ctx, "/edge.user.interface.v1.UserEdgeInterface/Auth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserEdgeInterfaceServer is the server API for UserEdgeInterface service.
// All implementations must embed UnimplementedUserEdgeInterfaceServer
// for forward compatibility
type UserEdgeInterfaceServer interface {
	Register(context.Context, *RegisterReq) (*RegisterReply, error)
	GenVerifyCode(context.Context, *GenVerifyCodeReq) (*GenVerifyCodeReply, error)
	Login(context.Context, *LoginReq) (*LoginReply, error)
	Logout(context.Context, *LogoutReq) (*LogoutReply, error)
	Auth(context.Context, *AuthReq) (*AuthReply, error)
	mustEmbedUnimplementedUserEdgeInterfaceServer()
}

// UnimplementedUserEdgeInterfaceServer must be embedded to have forward compatible implementations.
type UnimplementedUserEdgeInterfaceServer struct {
}

func (UnimplementedUserEdgeInterfaceServer) Register(context.Context, *RegisterReq) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUserEdgeInterfaceServer) GenVerifyCode(context.Context, *GenVerifyCodeReq) (*GenVerifyCodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenVerifyCode not implemented")
}
func (UnimplementedUserEdgeInterfaceServer) Login(context.Context, *LoginReq) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserEdgeInterfaceServer) Logout(context.Context, *LogoutReq) (*LogoutReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedUserEdgeInterfaceServer) Auth(context.Context, *AuthReq) (*AuthReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (UnimplementedUserEdgeInterfaceServer) mustEmbedUnimplementedUserEdgeInterfaceServer() {}

// UnsafeUserEdgeInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserEdgeInterfaceServer will
// result in compilation errors.
type UnsafeUserEdgeInterfaceServer interface {
	mustEmbedUnimplementedUserEdgeInterfaceServer()
}

func RegisterUserEdgeInterfaceServer(s grpc.ServiceRegistrar, srv UserEdgeInterfaceServer) {
	s.RegisterService(&UserEdgeInterface_ServiceDesc, srv)
}

func _UserEdgeInterface_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserEdgeInterfaceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edge.user.interface.v1.UserEdgeInterface/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserEdgeInterfaceServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserEdgeInterface_GenVerifyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenVerifyCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserEdgeInterfaceServer).GenVerifyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edge.user.interface.v1.UserEdgeInterface/GenVerifyCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserEdgeInterfaceServer).GenVerifyCode(ctx, req.(*GenVerifyCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserEdgeInterface_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserEdgeInterfaceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edge.user.interface.v1.UserEdgeInterface/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserEdgeInterfaceServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserEdgeInterface_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserEdgeInterfaceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edge.user.interface.v1.UserEdgeInterface/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserEdgeInterfaceServer).Logout(ctx, req.(*LogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserEdgeInterface_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserEdgeInterfaceServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edge.user.interface.v1.UserEdgeInterface/Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserEdgeInterfaceServer).Auth(ctx, req.(*AuthReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserEdgeInterface_ServiceDesc is the grpc.ServiceDesc for UserEdgeInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserEdgeInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "edge.user.interface.v1.UserEdgeInterface",
	HandlerType: (*UserEdgeInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _UserEdgeInterface_Register_Handler,
		},
		{
			MethodName: "GenVerifyCode",
			Handler:    _UserEdgeInterface_GenVerifyCode_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _UserEdgeInterface_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _UserEdgeInterface_Logout_Handler,
		},
		{
			MethodName: "Auth",
			Handler:    _UserEdgeInterface_Auth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/edge/user/interface/v1/user_interface.proto",
}
