// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CourseEdgeInterfaceClient is the client API for CourseEdgeInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CourseEdgeInterfaceClient interface {
	ListCourse(ctx context.Context, in *ListCourseRequest, opts ...grpc.CallOption) (*ListCourseReply, error)
}

type courseEdgeInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewCourseEdgeInterfaceClient(cc grpc.ClientConnInterface) CourseEdgeInterfaceClient {
	return &courseEdgeInterfaceClient{cc}
}

func (c *courseEdgeInterfaceClient) ListCourse(ctx context.Context, in *ListCourseRequest, opts ...grpc.CallOption) (*ListCourseReply, error) {
	out := new(ListCourseReply)
	err := c.cc.Invoke(ctx, "/api.edge.course.interface.v1.CourseEdgeInterface/ListCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CourseEdgeInterfaceServer is the server API for CourseEdgeInterface service.
// All implementations must embed UnimplementedCourseEdgeInterfaceServer
// for forward compatibility
type CourseEdgeInterfaceServer interface {
	ListCourse(context.Context, *ListCourseRequest) (*ListCourseReply, error)
	mustEmbedUnimplementedCourseEdgeInterfaceServer()
}

// UnimplementedCourseEdgeInterfaceServer must be embedded to have forward compatible implementations.
type UnimplementedCourseEdgeInterfaceServer struct {
}

func (UnimplementedCourseEdgeInterfaceServer) ListCourse(context.Context, *ListCourseRequest) (*ListCourseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCourse not implemented")
}
func (UnimplementedCourseEdgeInterfaceServer) mustEmbedUnimplementedCourseEdgeInterfaceServer() {}

// UnsafeCourseEdgeInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CourseEdgeInterfaceServer will
// result in compilation errors.
type UnsafeCourseEdgeInterfaceServer interface {
	mustEmbedUnimplementedCourseEdgeInterfaceServer()
}

func RegisterCourseEdgeInterfaceServer(s grpc.ServiceRegistrar, srv CourseEdgeInterfaceServer) {
	s.RegisterService(&CourseEdgeInterface_ServiceDesc, srv)
}

func _CourseEdgeInterface_ListCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseEdgeInterfaceServer).ListCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.edge.course.interface.v1.CourseEdgeInterface/ListCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseEdgeInterfaceServer).ListCourse(ctx, req.(*ListCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CourseEdgeInterface_ServiceDesc is the grpc.ServiceDesc for CourseEdgeInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CourseEdgeInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.edge.course.interface.v1.CourseEdgeInterface",
	HandlerType: (*CourseEdgeInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCourse",
			Handler:    _CourseEdgeInterface_ListCourse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/edge/course/interface/v1/course_interface.proto",
}
