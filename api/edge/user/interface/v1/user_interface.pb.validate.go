// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/edge/user/interface/v1/user_interface.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on GenVerifyCodeReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GenVerifyCodeReq) Validate() error {
	if m == nil {
		return nil
	}

	switch m.MessageMedia.(type) {

	case *GenVerifyCodeReq_Mobile:

		if !_GenVerifyCodeReq_Mobile_Pattern.MatchString(m.GetMobile()) {
			return GenVerifyCodeReqValidationError{
				field:  "Mobile",
				reason: "value does not match regex pattern \"^1[0-9]{10}$\"",
			}
		}

	case *GenVerifyCodeReq_Email:

		if err := m._validateEmail(m.GetEmail()); err != nil {
			return GenVerifyCodeReqValidationError{
				field:  "Email",
				reason: "value must be a valid email address",
				cause:  err,
			}
		}

	default:
		return GenVerifyCodeReqValidationError{
			field:  "MessageMedia",
			reason: "value is required",
		}

	}

	return nil
}

func (m *GenVerifyCodeReq) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *GenVerifyCodeReq) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// GenVerifyCodeReqValidationError is the validation error returned by
// GenVerifyCodeReq.Validate if the designated constraints aren't met.
type GenVerifyCodeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenVerifyCodeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenVerifyCodeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenVerifyCodeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenVerifyCodeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenVerifyCodeReqValidationError) ErrorName() string { return "GenVerifyCodeReqValidationError" }

// Error satisfies the builtin error interface
func (e GenVerifyCodeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenVerifyCodeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenVerifyCodeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenVerifyCodeReqValidationError{}

var _GenVerifyCodeReq_Mobile_Pattern = regexp.MustCompile("^1[0-9]{10}$")

// Validate checks the field values on GenVerifyCodeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GenVerifyCodeReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GenVerifyCodeReplyValidationError is the validation error returned by
// GenVerifyCodeReply.Validate if the designated constraints aren't met.
type GenVerifyCodeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenVerifyCodeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenVerifyCodeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenVerifyCodeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenVerifyCodeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenVerifyCodeReplyValidationError) ErrorName() string {
	return "GenVerifyCodeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GenVerifyCodeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenVerifyCodeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenVerifyCodeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenVerifyCodeReplyValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *User) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUsername()); l < 3 || l > 30 {
		return UserValidationError{
			field:  "Username",
			reason: "value length must be between 3 and 30 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetPassword()) < 6 {
		return UserValidationError{
			field:  "Password",
			reason: "value length must be at least 6 runes",
		}
	}

	if m.GetRealName() != "" {

		if l := utf8.RuneCountInString(m.GetRealName()); l < 3 || l > 30 {
			return UserValidationError{
				field:  "RealName",
				reason: "value length must be between 3 and 30 runes, inclusive",
			}
		}

	}

	// no validation rules for IsTeacher

	if m.GetStars() != 0 {

		if val := m.GetStars(); val < 0 || val > 5 {
			return UserValidationError{
				field:  "Stars",
				reason: "value must be inside range [0, 5]",
			}
		}

	}

	switch m.MessageMedia.(type) {

	case *User_Email:

		if err := m._validateEmail(m.GetEmail()); err != nil {
			return UserValidationError{
				field:  "Email",
				reason: "value must be a valid email address",
				cause:  err,
			}
		}

	case *User_Mobile:

		if !_User_Mobile_Pattern.MatchString(m.GetMobile()) {
			return UserValidationError{
				field:  "Mobile",
				reason: "value does not match regex pattern \"^1[0-9]{10}$\"",
			}
		}

	default:
		return UserValidationError{
			field:  "MessageMedia",
			reason: "value is required",
		}

	}

	return nil
}

func (m *User) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *User) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

var _User_Mobile_Pattern = regexp.MustCompile("^1[0-9]{10}$")

// Validate checks the field values on DBUser with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *DBUser) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for Email

	// no validation rules for Mobile

	// no validation rules for RealName

	// no validation rules for IsTeacher

	// no validation rules for Stars

	return nil
}

// DBUserValidationError is the validation error returned by DBUser.Validate if
// the designated constraints aren't met.
type DBUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DBUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DBUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DBUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DBUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DBUserValidationError) ErrorName() string { return "DBUserValidationError" }

// Error satisfies the builtin error interface
func (e DBUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDBUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DBUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DBUserValidationError{}

// Validate checks the field values on RegisterReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RegisterReq) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetUser() == nil {
		return RegisterReqValidationError{
			field:  "User",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterReqValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if !_RegisterReq_VerifyCode_Pattern.MatchString(m.GetVerifyCode()) {
		return RegisterReqValidationError{
			field:  "VerifyCode",
			reason: "value does not match regex pattern \"(?i)^[0-9a-z]+$\"",
		}
	}

	return nil
}

// RegisterReqValidationError is the validation error returned by
// RegisterReq.Validate if the designated constraints aren't met.
type RegisterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterReqValidationError) ErrorName() string { return "RegisterReqValidationError" }

// Error satisfies the builtin error interface
func (e RegisterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterReqValidationError{}

var _RegisterReq_VerifyCode_Pattern = regexp.MustCompile("(?i)^[0-9a-z]+$")

// Validate checks the field values on RegisterReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RegisterReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// RegisterReplyValidationError is the validation error returned by
// RegisterReply.Validate if the designated constraints aren't met.
type RegisterReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterReplyValidationError) ErrorName() string { return "RegisterReplyValidationError" }

// Error satisfies the builtin error interface
func (e RegisterReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterReplyValidationError{}

// Validate checks the field values on LoginReq with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *LoginReq) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUsername()); l < 3 || l > 30 {
		return LoginReqValidationError{
			field:  "Username",
			reason: "value length must be between 3 and 30 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetPassword()) < 6 {
		return LoginReqValidationError{
			field:  "Password",
			reason: "value length must be at least 6 runes",
		}
	}

	return nil
}

// LoginReqValidationError is the validation error returned by
// LoginReq.Validate if the designated constraints aren't met.
type LoginReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginReqValidationError) ErrorName() string { return "LoginReqValidationError" }

// Error satisfies the builtin error interface
func (e LoginReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginReqValidationError{}

// Validate checks the field values on LoginReply with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *LoginReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Token

	return nil
}

// LoginReplyValidationError is the validation error returned by
// LoginReply.Validate if the designated constraints aren't met.
type LoginReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginReplyValidationError) ErrorName() string { return "LoginReplyValidationError" }

// Error satisfies the builtin error interface
func (e LoginReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginReplyValidationError{}

// Validate checks the field values on LogoutReq with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *LogoutReq) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// LogoutReqValidationError is the validation error returned by
// LogoutReq.Validate if the designated constraints aren't met.
type LogoutReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutReqValidationError) ErrorName() string { return "LogoutReqValidationError" }

// Error satisfies the builtin error interface
func (e LogoutReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutReqValidationError{}

// Validate checks the field values on LogoutReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *LogoutReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// LogoutReplyValidationError is the validation error returned by
// LogoutReply.Validate if the designated constraints aren't met.
type LogoutReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutReplyValidationError) ErrorName() string { return "LogoutReplyValidationError" }

// Error satisfies the builtin error interface
func (e LogoutReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutReplyValidationError{}

// Validate checks the field values on AuthReq with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *AuthReq) Validate() error {
	if m == nil {
		return nil
	}

	if !_AuthReq_Token_Pattern.MatchString(m.GetToken()) {
		return AuthReqValidationError{
			field:  "Token",
			reason: "value does not match regex pattern \"^[0-9a-f]+$\"",
		}
	}

	return nil
}

// AuthReqValidationError is the validation error returned by AuthReq.Validate
// if the designated constraints aren't met.
type AuthReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthReqValidationError) ErrorName() string { return "AuthReqValidationError" }

// Error satisfies the builtin error interface
func (e AuthReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthReqValidationError{}

var _AuthReq_Token_Pattern = regexp.MustCompile("^[0-9a-f]+$")

// Validate checks the field values on AuthReply with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *AuthReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthReplyValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AuthReplyValidationError is the validation error returned by
// AuthReply.Validate if the designated constraints aren't met.
type AuthReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthReplyValidationError) ErrorName() string { return "AuthReplyValidationError" }

// Error satisfies the builtin error interface
func (e AuthReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthReplyValidationError{}
