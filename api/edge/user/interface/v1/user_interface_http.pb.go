// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.5

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type UserEdgeInterfaceHTTPServer interface {
	Auth(context.Context, *AuthReq) (*AuthReply, error)
	GenVerifyCode(context.Context, *GenVerifyCodeReq) (*GenVerifyCodeReply, error)
	Login(context.Context, *LoginReq) (*LoginReply, error)
	Logout(context.Context, *LogoutReq) (*LogoutReply, error)
	Register(context.Context, *RegisterReq) (*RegisterReply, error)
}

func RegisterUserEdgeInterfaceHTTPServer(s *http.Server, srv UserEdgeInterfaceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/register", _UserEdgeInterface_Register0_HTTP_Handler(srv))
	r.POST("/v1/auth/code", _UserEdgeInterface_GenVerifyCode0_HTTP_Handler(srv))
	r.POST("/v1/login", _UserEdgeInterface_Login0_HTTP_Handler(srv))
	r.POST("/v1/logout", _UserEdgeInterface_Logout0_HTTP_Handler(srv))
	r.POST("/v1/auth/verify", _UserEdgeInterface_Auth0_HTTP_Handler(srv))
}

func _UserEdgeInterface_Register0_HTTP_Handler(srv UserEdgeInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/edge.user.interface.v1.UserEdgeInterface/Register")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Register(ctx, req.(*RegisterReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterReply)
		return ctx.Result(200, reply)
	}
}

func _UserEdgeInterface_GenVerifyCode0_HTTP_Handler(srv UserEdgeInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GenVerifyCodeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/edge.user.interface.v1.UserEdgeInterface/GenVerifyCode")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GenVerifyCode(ctx, req.(*GenVerifyCodeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GenVerifyCodeReply)
		return ctx.Result(200, reply)
	}
}

func _UserEdgeInterface_Login0_HTTP_Handler(srv UserEdgeInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/edge.user.interface.v1.UserEdgeInterface/Login")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _UserEdgeInterface_Logout0_HTTP_Handler(srv UserEdgeInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LogoutReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/edge.user.interface.v1.UserEdgeInterface/Logout")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Logout(ctx, req.(*LogoutReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogoutReply)
		return ctx.Result(200, reply)
	}
}

func _UserEdgeInterface_Auth0_HTTP_Handler(srv UserEdgeInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AuthReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/edge.user.interface.v1.UserEdgeInterface/Auth")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Auth(ctx, req.(*AuthReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AuthReply)
		return ctx.Result(200, reply)
	}
}

type UserEdgeInterfaceHTTPClient interface {
	Auth(ctx context.Context, req *AuthReq, opts ...http.CallOption) (rsp *AuthReply, err error)
	GenVerifyCode(ctx context.Context, req *GenVerifyCodeReq, opts ...http.CallOption) (rsp *GenVerifyCodeReply, err error)
	Login(ctx context.Context, req *LoginReq, opts ...http.CallOption) (rsp *LoginReply, err error)
	Logout(ctx context.Context, req *LogoutReq, opts ...http.CallOption) (rsp *LogoutReply, err error)
	Register(ctx context.Context, req *RegisterReq, opts ...http.CallOption) (rsp *RegisterReply, err error)
}

type UserEdgeInterfaceHTTPClientImpl struct {
	cc *http.Client
}

func NewUserEdgeInterfaceHTTPClient(client *http.Client) UserEdgeInterfaceHTTPClient {
	return &UserEdgeInterfaceHTTPClientImpl{client}
}

func (c *UserEdgeInterfaceHTTPClientImpl) Auth(ctx context.Context, in *AuthReq, opts ...http.CallOption) (*AuthReply, error) {
	var out AuthReply
	pattern := "/v1/auth/verify"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/edge.user.interface.v1.UserEdgeInterface/Auth"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserEdgeInterfaceHTTPClientImpl) GenVerifyCode(ctx context.Context, in *GenVerifyCodeReq, opts ...http.CallOption) (*GenVerifyCodeReply, error) {
	var out GenVerifyCodeReply
	pattern := "/v1/auth/code"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/edge.user.interface.v1.UserEdgeInterface/GenVerifyCode"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserEdgeInterfaceHTTPClientImpl) Login(ctx context.Context, in *LoginReq, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/v1/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/edge.user.interface.v1.UserEdgeInterface/Login"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserEdgeInterfaceHTTPClientImpl) Logout(ctx context.Context, in *LogoutReq, opts ...http.CallOption) (*LogoutReply, error) {
	var out LogoutReply
	pattern := "/v1/logout"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/edge.user.interface.v1.UserEdgeInterface/Logout"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserEdgeInterfaceHTTPClientImpl) Register(ctx context.Context, in *RegisterReq, opts ...http.CallOption) (*RegisterReply, error) {
	var out RegisterReply
	pattern := "/v1/register"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/edge.user.interface.v1.UserEdgeInterface/Register"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
