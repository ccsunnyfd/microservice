// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"microservice/app/message/service/internal/biz"
	"microservice/app/message/service/internal/conf"
	"microservice/app/message/service/internal/data"
	"microservice/app/message/service/internal/server"
	"microservice/app/message/service/internal/service"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(confServer *conf.Server, email *conf.Email, logger log.Logger) (*kratos.App, func(), error) {
	emailSender, cleanup, err := data.NewEmailSender(email, logger)
	if err != nil {
		return nil, nil, err
	}
	dataData, cleanup2, err := data.NewData(logger, emailSender)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	emailRepo := data.NewEmailRepo(dataData, logger)
	emailUseCase := biz.NewEmailUseCase(emailRepo, logger)
	emailService := service.NewEmailService(emailUseCase, logger)
	mobileUseCase := biz.NewMobileUseCase(logger)
	mobileService := service.NewMobileService(mobileUseCase, logger)
	grpcServer := server.NewGRPCServer(confServer, emailService, mobileService, logger)
	app := newApp(logger, grpcServer)
	return app, func() {
		cleanup2()
		cleanup()
	}, nil
}
