// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"microservice/app/edge/course/interface/internal/biz"
	"microservice/app/edge/course/interface/internal/conf"
	"microservice/app/edge/course/interface/internal/data"
	"microservice/app/edge/course/interface/internal/server"
	"microservice/app/edge/course/interface/internal/service"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(confServer *conf.Server, data_Cache *conf.Data_Cache, logger log.Logger) (*kratos.App, func(), error) {
	courseClient, cleanup := data.NewCourseServiceClient()
	userEdgeInterfaceHTTPClient, cleanup2 := data.NewUserEdgeServiceClient()
	userClient, cleanup3 := data.NewUserServiceClient()
	dataData, err := data.NewData(logger, courseClient, userEdgeInterfaceHTTPClient, userClient)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	authRepo := data.NewAuthRepo(dataData, logger)
	auth, cleanup4 := server.NewAuthMiddleware(data_Cache, authRepo)
	courseRepo := data.NewCourseRepo(dataData, logger)
	courseUseCase := biz.NewCourseUseCase(courseRepo, logger)
	courseInterface := service.NewCourseEdgeInterfaceService(courseUseCase, logger)
	httpServer := server.NewHTTPServer(confServer, logger, auth, courseInterface)
	app := newApp(logger, httpServer)
	return app, func() {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
